import streamlit as st
import pandas as pd
import altair as alt
import datetime
import os
import pytz
import json
import firebase_admin
from firebase_admin import credentials, firestore
import bcrypt
import uuid
from streamlit_js_eval import get_session_storage_value, set_session_storage_value

# -----------------------------
# Page Setup and Styling
# -----------------------------
st.set_page_config(
    page_title="HR Dashboard",
    page_icon="üìä",
    layout="wide"
)

# Hide default Streamlit UI
hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# -----------------------------
# Timezone and Date Functions
# -----------------------------
bangkok_tz = pytz.timezone("Asia/Bangkok")

def thai_date(dt):
    """Converts a datetime object to a Thai date string (Buddhist year)."""
    if pd.isna(dt):
        return "N/A"
    return dt.strftime(f"%d/%m/{dt.year + 543}")

def format_time(dt):
    """Converts a datetime object to a time string (HH:MM)."""
    if pd.isna(dt) or (isinstance(dt, datetime.time) and dt == datetime.time(0, 0)):
        return "00:00"
    return dt.strftime("%H:%M")

# -----------------------------
# Data Handling
# -----------------------------
@st.cache_data
def load_data(file_path="attendances.xlsx"):
    """Loads data from an Excel or CSV file and returns a DataFrame."""
    file_extension = os.path.splitext(file_path)[1].lower()
    
    if not os.path.exists(file_path):
        st.warning(f"‚ùå Data file not found: {file_path}")
        return pd.DataFrame()

    try:
        if file_extension in ['.xlsx', '.xls']:
            df = pd.read_excel(file_path, engine='openpyxl')
        elif file_extension == '.csv':
            df = pd.read_csv(file_path)
        else:
            st.error(f"Unsupported file format: {file_extension}")
            return pd.DataFrame()
        
        # Data cleaning and type conversion
        if '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in df.columns:
            df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], errors='coerce')
        if '‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô' in df.columns:
            df['‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'] = df['‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'].replace('-', None)
            df['‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'] = pd.to_datetime(df['‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'], format='%H:%M:%S', errors='coerce').dt.time
        if '‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô' in df.columns:
            df['‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'] = df['‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'].replace('-', None)
            df['‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'] = pd.to_datetime(df['‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'], format='%H:%M:%S', errors='coerce').dt.time

        return df
    except Exception as e:
        st.error(f"Error reading file: {e}")
        return pd.DataFrame()

def process_user_data(df, user_name):
    """Processes attendance data for a specific user."""
    if df.empty or "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•" not in df.columns:
        return pd.DataFrame(), pd.DataFrame()

    normalized_user_name = user_name.strip().lower()
    df["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•_normalized"] = df["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].astype(str).str.strip().str.lower()
    
    df_user = df[df["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•_normalized"] == normalized_user_name].copy()
    if df_user.empty:
        return pd.DataFrame(), pd.DataFrame()

    for col in ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]:
        if col in df_user.columns:
            df_user[col] = df_user[col].astype(str).str.strip().str.replace(r"\s+", " ", regex=True)
    if "‡πÅ‡∏ú‡∏ô‡∏Å" in df_user.columns:
        df_user["‡πÅ‡∏ú‡∏ô‡∏Å"] = df_user["‡πÅ‡∏ú‡∏ô‡∏Å"].replace({"nan": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"})
    
    def leave_days(exception_text):
        return 0.5 if "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô" in str(exception_text) else 1

    df_user["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0)
    df_user["‡∏Ç‡∏≤‡∏î"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0)
    df_user["‡∏™‡∏≤‡∏¢"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏™‡∏≤‡∏¢" else 0)
    df_user["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô" else 0)

    leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢", "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"]
    summary_df = df_user.groupby("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")[leave_types].sum().reset_index()
    return df_user, summary_df

# -----------------------------
# Firebase Integration
# -----------------------------
if not firebase_admin._apps:
    try:
        service_account_info = st.secrets["firebase"]
        firebase_config_dict = dict(service_account_info)
        cred = credentials.Certificate(firebase_config_dict)
        firebase_admin.initialize_app(cred)
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase: {e}")
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ `secrets` ‡∏ö‡∏ô Streamlit Cloud ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        st.stop()

@st.cache_data(ttl=600)
def load_user_db():
    try:
        db = firestore.client()
        users_ref = db.collection("users")
        users_dict = {doc.id: doc.to_dict() for doc in users_ref.stream()}
        return users_dict
    except Exception as e:
        st.error(f"Error loading user database from Firestore: {e}")
        return {}

def save_user_db(phone, user_data):
    try:
        db = firestore.client()
        db.collection("users").document(phone).set(user_data)
        st.cache_data.clear()
    except Exception as e:
        st.error(f"Error saving user data to Firestore: {e}")

def create_session(user_phone):
    """Creates a new session in Firestore and returns its ID."""
    db = firestore.client()
    session_id = str(uuid.uuid4())
    session_ref = db.collection("sessions").document(session_id)
    session_ref.set({
        "user_phone": user_phone,
        "created_at": firestore.SERVER_TIMESTAMP
    })
    return session_id

def delete_session(session_id):
    """Deletes the current session from Firestore."""
    if session_id:
        db = firestore.client()
        db.collection("sessions").document(session_id).delete()

def logout():
    """Clears the session state and returns to the login page."""
    delete_session(st.session_state.get("session_id"))
    set_session_storage_value("session_id", None)
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

def check_session(session_id):
    """Checks for a valid session in Firestore."""
    if not session_id:
        return None
    db = firestore.client()
    session_ref = db.collection("sessions").document(session_id)
    session_doc = session_ref.get()
    if session_doc.exists:
        user_phone = session_doc.to_dict()["user_phone"]
        USERS_DB = load_user_db()
        if user_phone in USERS_DB:
            user_data = USERS_DB[user_phone]
            user_data["phone"] = user_phone
            return user_data
    return None

# -----------------------------
# Main App Logic
# -----------------------------
# --- Check for existing session at the start of every run ---
session_id_from_local_storage = get_session_storage_value(key="session_id")
if session_id_from_local_storage and "user" not in st.session_state:
    user_data = check_session(session_id_from_local_storage)
    if user_data:
        st.session_state.user = user_data["name"]
        st.session_state.phone = user_data["phone"]
        st.session_state.session_id = session_id_from_local_storage
        st.session_state.step = "dashboard"
    else:
        # Session in local storage is invalid, clear it
        set_session_storage_value("session_id", None)

if "step" not in st.session_state:
    st.session_state.step = "login"

if st.session_state.step == "login":
    USERS_DB = load_user_db()
    st.title("üìä HR Dashboard")
    st.markdown("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    col1, col2, col3 = st.columns([1, 1.5, 1])

    with col2:
        with st.container(border=True):
            st.markdown("#### <div style='text-align: center;'>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</div>", unsafe_allow_html=True)
            phone = st.text_input(
                "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 10 ‡∏´‡∏•‡∏±‡∏Å",
                max_chars=10,
                value=st.session_state.get("phone", "")
            )
            password = st.text_input(
                "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
                type="password",
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
            )

            if st.button("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", use_container_width=True, type="primary"):
                if phone in USERS_DB:
                    user_data = USERS_DB[phone]
                    if user_data.get("password") in ["null", None, ""]:
                        st.session_state.phone = phone
                        st.session_state.step = "set_password"
                        st.rerun()
                    elif user_data.get("password") and bcrypt.checkpw(password.encode('utf-8'), user_data.get("password").encode('utf-8')):
                        st.session_state.user = user_data["name"]
                        st.session_state.phone = phone
                        session_id = create_session(phone)
                        set_session_storage_value("session_id", session_id)
                        st.session_state.session_id = session_id
                        st.session_state.step = "dashboard"
                        st.rerun()
                    else:
                        st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                else:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

            st.markdown("---")
            if st.button("üîí ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", use_container_width=True):
                st.session_state.step = "forgot_password"
                st.rerun()

elif st.session_state.step == "set_password":
    USERS_DB = load_user_db()
    st.title(f"üîë ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å")
    col1, col2, col3 = st.columns([1, 1.5, 1])
    with col2:
        with st.container(border=True):
            st.markdown(f"#### <div style='text-align: center;'>‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å</div>", unsafe_allow_html=True)
            st.info(f"‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: {st.session_state.phone}")
            new_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")
            confirm_password = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")

            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", use_container_width=True, type="primary"):
                user_data = USERS_DB[st.session_state.phone]
                if not new_password:
                    st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á")
                elif new_password != confirm_password:
                    st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
                else:
                    hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                    user_data["password"] = hashed_password
                    save_user_db(st.session_state.phone, user_data)
                    st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                    st.session_state.step = "login"
                    st.rerun()
            if st.button("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô", use_container_width=True):
                st.session_state.step = "login"
                st.rerun()

elif st.session_state.step == "change_password":
    USERS_DB = load_user_db()
    st.title(f"üîë ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
    col1, col2, col3 = st.columns([1, 1.5, 1])
    with col2:
        with st.container(border=True):
            st.markdown(f"#### <div style='text-align: center;'>‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</div>", unsafe_allow_html=True)
            st.info(f"‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: {st.session_state.phone}")
            current_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", type="password")
            new_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")
            confirm_password = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")

            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", use_container_width=True, type="primary"):
                user_data = USERS_DB[st.session_state.phone]
                if not bcrypt.checkpw(current_password.encode('utf-8'), user_data.get("password", "").encode('utf-8')):
                    st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                elif not new_password:
                    st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á")
                elif new_password != confirm_password:
                    st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
                else:
                    hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                    user_data["password"] = hashed_password
                    save_user_db(st.session_state.phone, user_data)
                    st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                    st.session_state.step = "dashboard"
                    st.rerun()
            if st.button("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î", use_container_width=True):
                st.session_state.step = "dashboard"
                st.rerun()

elif st.session_state.step == "forgot_password":
    USERS_DB = load_user_db()
    st.title("üîí ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
    st.markdown("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")

    col1, col2, col3 = st.columns([1, 1.5, 1])
    with col2:
        with st.container(border=True):
            st.markdown("#### <div style='text-align: center;'>‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</div>", unsafe_allow_html=True)
            user_phone = st.text_input(
                "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™", 
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 10 ‡∏´‡∏•‡∏±‡∏Å", 
                max_chars=10
            )
            admin_phone = st.text_input(
                "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö", 
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö", 
                max_chars=10
            )
            admin_password = st.text_input(
                "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö", 
                type="password",
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"
            )
            new_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password", key="new_password")
            confirm_password = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password", key="confirm_new_password")

            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", use_container_width=True, type="primary"):
                if user_phone not in USERS_DB:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                elif admin_phone not in USERS_DB:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                else:
                    admin_data = USERS_DB[admin_phone]
                    if not bcrypt.checkpw(admin_password.encode('utf-8'), admin_data.get("password", "").encode('utf-8')):
                        st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    elif not new_password or new_password != confirm_password:
                        st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á")
                    else:
                        hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                        USERS_DB[user_phone]["password"] = hashed_password
                        save_user_db(user_phone, USERS_DB[user_phone])
                        st.success("‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô")
                        st.session_state.step = "login"
                        st.rerun()

    if st.button("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô", use_container_width=True):
        st.session_state.step = "login"
        st.rerun()

elif st.session_state.step == "dashboard":
    with st.sidebar:
        st.header("‡πÄ‡∏°‡∏ô‡∏π")
        st.info(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö,\n**{st.session_state.user}**")
        if st.button("üîë ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"):
            st.session_state.step = "change_password"
            st.rerun()
        st.divider()
        st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=logout, use_container_width=True)

    st.header("üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.subheader(f"**{st.session_state.user}**")

    df_full = load_data()
    if not df_full.empty and '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in df_full.columns:
        df_full_cleaned = df_full.dropna(subset=['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'])
        if not df_full_cleaned.empty:
            start_date = df_full_cleaned['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].min()
            end_date = df_full_cleaned['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].max()
            st.markdown(
                f'<p style="font-size: 0.8rem; margin: 0;">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: <b>{thai_date(start_date)}</b> ‡∏ñ‡∏∂‡∏á <b>{thai_date(end_date)}</b></p>',
                unsafe_allow_html=True
            )
    st.divider()

    df_user, summary = process_user_data(df_full, st.session_state.user)

    if summary.empty:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        # Ensure the user can still log out if no data is found
        st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=logout, use_container_width=True, type="secondary")
    else:
        st.markdown("### üóìÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à (‡∏ß‡∏±‡∏ô)", summary["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"].sum())
        col2.metric("‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)", summary["‡∏Ç‡∏≤‡∏î"].sum())
        col3.metric("‡∏°‡∏≤‡∏™‡∏≤‡∏¢ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", int(summary["‡∏™‡∏≤‡∏¢"].sum()))
        col4.metric("‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô (‡∏ß‡∏±‡∏ô)", int(summary["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"].sum()))
        st.divider()

        st.markdown("### üìà ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
        summary_melted = summary.melt(
            id_vars=["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"],
            value_vars=["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢", "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"],
            var_name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
            value_name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        )
        chart = alt.Chart(summary_melted).mark_bar().encode(
            x=alt.X('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á:Q', title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á)'),
            y=alt.Y('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:N', title='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', sort='-x'),
            color=alt.Color('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:N', 
                            scale=alt.Scale(
                                domain=['‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à', '‡∏Ç‡∏≤‡∏î', '‡∏™‡∏≤‡∏¢', '‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô'],
                                range=['#FFC300', '#C70039', '#FF5733', '#33C1FF']
                            ),
                            legend=None),
            tooltip=['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á']
        ).properties(title='‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
        st.altair_chart(chart, use_container_width=True)

        st.markdown("#### üìú ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
        leave_types_map = {
            "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à": ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"],
            "‡∏Ç‡∏≤‡∏î": ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"],
            "‡∏™‡∏≤‡∏¢": ["‡∏™‡∏≤‡∏¢"],
            "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô": ["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"]
        }
        
        for leave_type, exceptions in leave_types_map.items():
            dates_df = df_user[df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].isin(exceptions)]
            total_days = df_user[leave_type].sum()
            if not dates_df.empty:
                with st.expander(f"‡∏î‡∏π‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà **{leave_type}** (‡∏£‡∏ß‡∏° {total_days} ‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á)"):
                    for _, row in dates_df.sort_values(by="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà").iterrows():
                        check_in_time = format_time(row.get('‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'))
                        check_out_time = format_time(row.get('‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'))
                        time_display = f' <span style="white-space: nowrap;">{check_in_time}-{check_out_time}</span>'
                        st.markdown(
                            f'<p style="font-size: 0.9rem; margin: 0;">- <b>{thai_date(row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"])}</b>{time_display} ({row["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]})</p>',
                            unsafe_allow_html=True
                        )
        st.divider()
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=logout, use_container_width=True, type="secondary")


# -----------------------------
# Main App Logic
# -----------------------------
if "step" not in st.session_state:
    st.session_state.step = "login"

# Check if there's a valid session from local storage on every rerun
session_id_from_local_storage = st.session_state.get("session_id_hidden")
if session_id_from_local_storage:
    user_data = check_session(session_id_from_local_storage)
    if user_data:
        st.session_state.user = user_data["name"]
        st.session_state.phone = user_data["phone"]
        st.session_state.session_id = session_id_from_local_storage
        st.session_state.step = "dashboard"

if st.session_state.step == "login":
    display_login_page() # type: ignore
elif st.session_state.step == "set_password":
    display_password_page(mode="set") # type: ignore
elif st.session_state.step == "change_password":
    display_password_page(mode="change") # type: ignore
elif st.session_state.step == "forgot_password":
    display_forgot_password_page() # type: ignore
elif st.session_state.step == "dashboard":
    display_dashboard() # type: ignore

import streamlit as st
import pandas as pd
import altair as alt
import datetime
import os
import pytz
import time
import random

st.set_page_config(page_title="HR Dashboard", layout="wide")

# -----------------------------
# ‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
# -----------------------------
bangkok_tz = pytz.timezone("Asia/Bangkok")

def thai_date(dt):
    return dt.strftime(f"%d/%m/{dt.year + 543}")

thai_months = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
]

def format_thai_month(period):
    year = period.year + 543
    month = thai_months[period.month - 1]
    return f"{month} {year}"

# -----------------------------
# ‡πÇ‡∏´‡∏•‡∏î Excel
# -----------------------------
def load_data(file_path="attendances.xlsx"):
    try:
        if file_path and os.path.exists(file_path):
            df = pd.read_excel(file_path, engine='openpyxl')
            return df
        else:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel: attendances.xlsx")
            return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return pd.DataFrame()

df = load_data()

# -----------------------------
# Session State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OTP + Login
# -----------------------------
if "step" not in st.session_state:
    st.session_state.step = "login"
if "phone" not in st.session_state:
    st.session_state.phone = None
if "otp" not in st.session_state:
    st.session_state.otp = None
if "user" not in st.session_state:
    st.session_state.user = None

# -----------------------------
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏ö‡∏≠‡∏£‡πå -> ‡∏ä‡∏∑‡πà‡∏≠)
# -----------------------------
users = {
    "0989620358": "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏≠‡∏á",
   
}

# -----------------------------
# ‡∏´‡∏ô‡πâ‡∏≤ Login
# -----------------------------
if st.session_state.step == "login":
    st.title("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    phone_input = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå")
    if st.button("‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™ OTP"):
        if phone_input in users:
            st.session_state.phone = phone_input
            st.session_state.otp = str(random.randint(1000, 9999))
            st.session_state.step = "verify"
            st.success(f"‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: {st.session_state.otp} (‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÅ‡∏≠‡∏û)")
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    st.stop()

# -----------------------------
# ‡∏´‡∏ô‡πâ‡∏≤ OTP
# -----------------------------
if st.session_state.step == "verify":
    st.title("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP")
    otp_input = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP")
    if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"):
        if otp_input == st.session_state.otp:
            st.session_state.user = users[st.session_state.phone]
            st.session_state.step = "dashboard"
        else:
            st.error("‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop()

# -----------------------------
# Dashboard (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
# -----------------------------
if st.session_state.step == "dashboard":
    st.title(f"üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á {st.session_state.user}")

    # Filter ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    df_user = df[df["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == st.session_state.user].copy()

    if df_user.empty:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á")
        st.stop()

    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    for col in ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]:
        if col in df_user.columns:
            df_user[col] = df_user[col].astype(str).str.strip().str.replace(r"\s+", " ", regex=True)

    if "‡πÅ‡∏ú‡∏ô‡∏Å" in df_user.columns:
        df_user["‡πÅ‡∏ú‡∏ô‡∏Å"] = df_user["‡πÅ‡∏ú‡∏ô‡∏Å"].replace({"nan": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"})

    if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" in df_user.columns:
        df_user["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df_user["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors='coerce')
        df_user["‡∏õ‡∏µ"] = df_user["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.year + 543
        df_user["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df_user["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.to_period("M")

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤
    def leave_days(row):
        if "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô" in str(row):
            return 0.5
        return 1

    df_user["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0
    )
    df_user["‡∏Ç‡∏≤‡∏î"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0
    )
    df_user["‡∏™‡∏≤‡∏¢"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏™‡∏≤‡∏¢" else 0)
    df_user["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô" else 0)

    leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢", "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"]
    summary = df_user.groupby(["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å"])[leave_types].sum().reset_index()

    st.markdown("### üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
    st.dataframe(summary.drop(columns=["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å"], errors='ignore'), use_container_width=True)

    # -----------------------------
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏Ç‡∏≤‡∏î/‡∏™‡∏≤‡∏¢/‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô
    # -----------------------------
    for leave in leave_types:
        st.subheader(f"{leave}")
        if leave == "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à":
            relevant_exceptions = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"]
        elif leave == "‡∏Ç‡∏≤‡∏î":
            relevant_exceptions = ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"]
        else:
            relevant_exceptions = [leave]

        dates = df_user.loc[df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].isin(relevant_exceptions), ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]]
        if not dates.empty:
            total_days = dates["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(leave_days).sum()
            with st.expander(f"{leave} ({total_days} ‡∏ß‡∏±‡∏ô)"):
                date_list = []
                for _, row in dates.iterrows():
                    label = row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].strftime("%d/%m/%Y") + f" ({row['‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô']})"
                    date_list.append(label)
                st.write(date_list)

        # ‡∏Å‡∏£‡∏≤‡∏ü
        chart = (
            alt.Chart(summary)
            .mark_bar(cornerRadiusTopLeft=5, cornerRadiusBottomLeft=5, color="#C70039")
            .encode(
                y=alt.Y("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:N", sort="-x", title="‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"),
                x=alt.X(leave + ":Q", title=leave),
                tooltip=["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", leave],
            )
            .properties(width=800, height=200)
        )
        st.altair_chart(chart, use_container_width=True)

    # -----------------------------
    # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    # -----------------------------
    if st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
        st.session_state.step = "login"
        st.session_state.user = None
        st.session_state.otp = None
        st.session_state.phone = None
        st.experimental_rerun()

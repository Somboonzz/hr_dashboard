import streamlit as st
import pandas as pd
import altair as alt
import datetime
import os
import pytz
import random

# -----------------------------
# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå
# -----------------------------
st.set_page_config(
    page_title="HR Dashboard",
    page_icon="üìä",
    layout="wide"
)

# ‡∏ã‡πà‡∏≠‡∏ô UI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Streamlit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏õ‡∏Ø ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# -----------------------------
# ‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
# -----------------------------
bangkok_tz = pytz.timezone("Asia/Bangkok")

def thai_date(dt):
    """‡πÅ‡∏õ‡∏•‡∏á datetime object ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢ (‡∏û.‡∏®.)"""
    return dt.strftime(f"%d/%m/{dt.year + 543}")

# -----------------------------
# ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# -----------------------------
@st.cache_data # Cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
def load_data(file_path="attendances.xlsx"):
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô DataFrame"""
    if file_path and os.path.exists(file_path):
        return pd.read_excel(file_path, engine='openpyxl')
    else:
        st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel: attendances.xlsx")
        return pd.DataFrame()

def process_user_data(df, user_name):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
    df_user = df[df["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == user_name].copy()
    if df_user.empty:
        return pd.DataFrame(), pd.DataFrame()

    # --- ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    for col in ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]:
        if col in df_user.columns:
            df_user[col] = df_user[col].astype(str).str.strip().str.replace(r"\s+", " ", regex=True)
    if "‡πÅ‡∏ú‡∏ô‡∏Å" in df_user.columns:
        df_user["‡πÅ‡∏ú‡∏ô‡∏Å"] = df_user["‡πÅ‡∏ú‡∏ô‡∏Å"].replace({"nan": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"})
    if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" in df_user.columns:
        df_user["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df_user["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors='coerce')

    # --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ---
    def leave_days(exception_text):
        return 0.5 if "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô" in str(exception_text) else 1

    df_user["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0)
    df_user["‡∏Ç‡∏≤‡∏î"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0)
    df_user["‡∏™‡∏≤‡∏¢"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏™‡∏≤‡∏¢" else 0)
    df_user["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô" else 0)

    leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢", "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"]
    summary_df = df_user.groupby("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")[leave_types].sum().reset_index()

    return df_user, summary_df

# -----------------------------
# ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Session State ‡πÅ‡∏•‡∏∞ Authentication
# -----------------------------
if "step" not in st.session_state:
    st.session_state.step = "login"
    st.session_state.phone = ""
    st.session_state.otp_input = ""
    st.session_state.otp_sent = False
    st.session_state.user = ""
    st.session_state.generated_otp = ""

# ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
USERS_DB = {
    "0989620358": "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏≠‡∏á",
    "0951646928": "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏û‡∏£‡∏ó‡∏¥‡∏û‡∏¢‡πå ‡∏™‡∏∏‡∏Ç‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå",
    "0618741894": "‡∏ô‡∏≤‡∏¢‡∏≠‡∏°‡∏£ ‡πÄ‡∏û‡πá‡∏á‡πÇ‡∏™‡∏†‡∏≤",
}

def logout():
    """‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Session State ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login"""
    st.session_state.step = "login"
    st.session_state.phone = ""
    st.session_state.otp_input = ""
    st.session_state.otp_sent = False
    st.session_state.user = ""
    st.session_state.generated_otp = ""
    st.rerun()

# -----------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (UI)
# -----------------------------

def display_login_page():
    """‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô"""
    st.title("üìä HR Dashboard")
    st.markdown("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

    col1, col2, col3 = st.columns([1, 1.5, 1]) # ‡∏à‡∏±‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á

    with col2:
        with st.container(border=True):
            st.markdown("#### <div style='text-align: center;'>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ OTP</div>", unsafe_allow_html=True)
            
            phone_input = st.text_input(
                "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
                key="phone",
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 10 ‡∏´‡∏•‡∏±‡∏Å",
                max_chars=10
            )

            if st.button("üì≤ ‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™ OTP", use_container_width=True, type="primary"):
                if phone_input in USERS_DB:
                    st.session_state.otp_sent = True
                    st.session_state.generated_otp = str(random.randint(1000, 9999))
                    # ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡∏à‡∏∞‡∏™‡πà‡∏á OTP ‡∏ú‡πà‡∏≤‡∏ô SMS ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                    st.success(f"OTP ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå {phone_input} ‡πÅ‡∏•‡πâ‡∏ß")
                    st.info(f"‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ **{st.session_state.generated_otp}**")
                else:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

            if st.session_state.otp_sent:
                otp_input = st.text_input(
                    "‡∏£‡∏´‡∏±‡∏™ OTP",
                    key="otp_input",
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ 4 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö",
                    max_chars=4
                )
                if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP", use_container_width=True):
                    if otp_input == st.session_state.generated_otp:
                        st.session_state.user = USERS_DB[st.session_state.phone]
                        st.session_state.step = "dashboard"
                        st.rerun() # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏Ø ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ dashboard
                    else:
                        st.error("‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

def display_dashboard():
    """‡πÅ‡∏™‡∏î‡∏á Dashboard ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    
    # --- Sidebar ---
    with st.sidebar:
        st.header("‡πÄ‡∏°‡∏ô‡∏π")
        st.info("‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")

    # --- Main Content ---
    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß (Header) ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ ---
    st.title(f"üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.caption(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: **{st.session_state.user}**")
    st.divider()

    df_full = load_data()
    df_user, summary = process_user_data(df_full, st.session_state.user)

    if summary.empty:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ (Footer) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ---
        # ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        st.divider()
        _ , btn_col, _ = st.columns([1, 0.5, 1])
        with btn_col:
            st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=logout, use_container_width=True)
        return

    # --- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ (Metrics) ---
    st.markdown("### üóìÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à (‡∏ß‡∏±‡∏ô)", summary["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"].sum())
    col2.metric("‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)", summary["‡∏Ç‡∏≤‡∏î"].sum())
    col3.metric("‡∏°‡∏≤‡∏™‡∏≤‡∏¢ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", int(summary["‡∏™‡∏≤‡∏¢"].sum()))
    col4.metric("‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô (‡∏ß‡∏±‡∏ô)", int(summary["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"].sum()))
    st.divider()

    # --- ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü ---
    st.markdown("### üìà ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")

    summary_melted = summary.melt(
        id_vars=["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"],
        value_vars=["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢", "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"],
        var_name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
        value_name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    )

    chart = alt.Chart(summary_melted).mark_bar().encode(
        x=alt.X('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á:Q', title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á)'),
        y=alt.Y('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:N', title='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', sort='-x'),
        color=alt.Color('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:N', 
                        scale=alt.Scale(
                            domain=['‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à', '‡∏Ç‡∏≤‡∏î', '‡∏™‡∏≤‡∏¢', '‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô'],
                            range=['#FFC300', '#C70039', '#FF5733', '#33C1FF']
                        ),
                        legend=None),
        tooltip=['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á']
    ).properties(
        title='‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    )
    st.altair_chart(chart, use_container_width=True)

    # --- ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö Expander ---
    st.markdown("#### üìú ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
    leave_types_map = {
        "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à": ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"],
        "‡∏Ç‡∏≤‡∏î": ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"],
        "‡∏™‡∏≤‡∏¢": ["‡∏™‡∏≤‡∏¢"],
        "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô": ["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"]
    }
    
    for leave_type, exceptions in leave_types_map.items():
        dates_df = df_user[df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].isin(exceptions)]
        total_days = df_user[leave_type].sum()

        if not dates_df.empty:
            with st.expander(f"‡∏î‡∏π‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà **{leave_type}** (‡∏£‡∏ß‡∏° {total_days} ‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á)"):
                for _, row in dates_df.iterrows():
                    st.markdown(f"- **{thai_date(row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'])}**: {row['‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô']}")
    
    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ (Footer) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ---
    st.divider()
    _ , btn_col, _ = st.columns([1, 0.5, 1]) # ‡∏™‡∏£‡πâ‡∏≤‡∏á 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
    with btn_col:
        st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=logout, use_container_width=True)


# -----------------------------
# Main App Logic
# -----------------------------
if st.session_state.step == "login":
    display_login_page()
else:
    display_dashboard()
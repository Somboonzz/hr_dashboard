import streamlit as st
import pandas as pd
import altair as alt
import datetime
import os
import pytz
import json

# -----------------------------
# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå
# -----------------------------
st.set_page_config(
    page_title="HR Dashboard",
    page_icon="üìä",
    layout="wide"
)

# ‡∏ã‡πà‡∏≠‡∏ô UI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Streamlit
hide_streamlit_style = """
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    </style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# -----------------------------
# ‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
# -----------------------------
bangkok_tz = pytz.timezone("Asia/Bangkok")

def thai_date(dt):
    if pd.isna(dt):
        return "N/A"
    return dt.strftime(f"%d/%m/{dt.year + 543}")

def format_time(val):
    """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤ HH:MM ‡∏´‡∏£‡∏∑‡∏≠ 00:00"""
    if pd.isna(val) or val in ["-", "", None]:
        return "00:00"
    try:
        if isinstance(val, datetime.time):
            return val.strftime("%H:%M")
        if isinstance(val, datetime.datetime):
            return val.strftime("%H:%M")
        parsed = pd.to_datetime(str(val), errors="coerce")
        if pd.isna(parsed):
            return "00:00"
        return parsed.strftime("%H:%M")
    except:
        return "00:00"

# -----------------------------
# ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# -----------------------------
@st.cache_data
def load_data(file_path="attendances.xlsx"):
    if file_path and os.path.exists(file_path):
        try:
            df = pd.read_excel(file_path, engine='openpyxl')
            if '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in df.columns:
                df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], errors='coerce')

            def parse_time(val):
                if pd.isna(val) or val in ["-", "", None]:
                    return datetime.time(0, 0)
                try:
                    parsed = pd.to_datetime(str(val), format='%H:%M', errors='coerce')
                    if pd.isna(parsed):
                        return datetime.time(0, 0)
                    return parsed.time()
                except:
                    return datetime.time(0, 0)

            if '‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô' in df.columns:
                df['‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'] = df['‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'].apply(parse_time)
            if '‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô' in df.columns:
                df['‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'] = df['‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'].apply(parse_time)

            return df
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel: {e}")
            return pd.DataFrame()
    else:
        st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel: attendances.xlsx")
        return pd.DataFrame()

def process_user_data(df, user_name):
    if df.empty or "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•" not in df.columns:
        return pd.DataFrame(), pd.DataFrame()

    df_user = df[df["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == user_name].copy()
    if df_user.empty:
        return pd.DataFrame(), pd.DataFrame()

    for col in ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]:
        if col in df_user.columns:
            df_user[col] = df_user[col].astype(str).str.strip().str.replace(r"\s+", " ", regex=True)
    if "‡πÅ‡∏ú‡∏ô‡∏Å" in df_user.columns:
        df_user["‡πÅ‡∏ú‡∏ô‡∏Å"] = df_user["‡πÅ‡∏ú‡∏ô‡∏Å"].replace({"nan": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"})
    
    def leave_days(exception_text):
        return 0.5 if "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô" in str(exception_text) else 1

    df_user["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0)
    df_user["‡∏Ç‡∏≤‡∏î"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0)
    df_user["‡∏™‡∏≤‡∏¢"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏™‡∏≤‡∏¢" else 0)
    df_user["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"] = df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô" else 0)

    leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢", "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"]
    summary_df = df_user.groupby("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")[leave_types].sum().reset_index()
    return df_user, summary_df

# -----------------------------
# ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Session State
# -----------------------------
def load_user_db():
    try:
        if os.path.exists("users_db.json"):
            with open("users_db.json", "r", encoding="utf-8") as f:
                return json.load(f)
        else:
            initial_db = {
                "0989620358": {"name": "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏≠‡∏á", "password": None},
                "0951646928": {"name": "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏û‡∏£‡∏ó‡∏¥‡∏û‡∏¢‡πå ‡∏™‡∏∏‡∏Ç‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå", "password": None},
                "0618741894": {"name": "‡∏ô‡∏≤‡∏¢‡∏≠‡∏°‡∏£ ‡πÄ‡∏û‡πá‡∏á‡πÇ‡∏™‡∏†‡∏≤", "password": None},
                "0888888888": {"name": "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö", "password": "admin"},
            }
            with open("users_db.json", "w", encoding="utf-8") as f:
                json.dump(initial_db, f, indent=4)
            return initial_db
    except Exception as e:
        st.error(f"Error loading user database: {e}")
        return {}

def save_user_db():
    try:
        with open("users_db.json", "w", encoding="utf-8") as f:
            json.dump(st.session_state.USERS_DB, f, indent=4)
    except Exception as e:
        st.error(f"Error saving user database: {e}")

if "step" not in st.session_state:
    st.session_state.step = "login"
    st.session_state.phone = ""
    st.session_state.user = ""
    st.session_state.USERS_DB = load_user_db()

def logout():
    keys_to_reset = ["step", "phone", "user"]
    for key in keys_to_reset:
        if key in st.session_state:
            st.session_state[key] = ""
    st.session_state.step = "login"
    st.rerun()

# -----------------------------
# UI ‡∏™‡πà‡∏ß‡∏ô Dashboard
# -----------------------------
def display_dashboard():
    with st.sidebar:
        st.header("‡πÄ‡∏°‡∏ô‡∏π")
        st.info(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö,\n**{st.session_state.user}**")
        st.divider()
        st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=logout, use_container_width=True)

    st.header("üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.subheader(f"‡∏Ç‡∏≠‡∏á **{st.session_state.user}**")

    df_full = load_data()
    df_user, summary = process_user_data(df_full, st.session_state.user)

    if summary.empty:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        return

    st.markdown("### üóìÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à (‡∏ß‡∏±‡∏ô)", summary["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"].sum())
    col2.metric("‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)", summary["‡∏Ç‡∏≤‡∏î"].sum())
    col3.metric("‡∏°‡∏≤‡∏™‡∏≤‡∏¢ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", int(summary["‡∏™‡∏≤‡∏¢"].sum()))
    col4.metric("‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô (‡∏ß‡∏±‡∏ô)", int(summary["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"].sum()))
    st.divider()

    st.markdown("### üìú ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
    leave_types_map = {
        "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à": ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"],
        "‡∏Ç‡∏≤‡∏î": ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"],
        "‡∏™‡∏≤‡∏¢": ["‡∏™‡∏≤‡∏¢"],
        "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô": ["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"]
    }
    
    for leave_type, exceptions in leave_types_map.items():
        dates_df = df_user[df_user["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].isin(exceptions)]
        total_days = df_user[leave_type].sum()
        if not dates_df.empty:
            with st.expander(f"‡∏î‡∏π‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà **{leave_type}** (‡∏£‡∏ß‡∏° {total_days} ‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á)"):
                for _, row in dates_df.sort_values(by="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà").iterrows():
                    check_in_time = format_time(row.get('‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'))
                    check_out_time = format_time(row.get('‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'))
                    time_display = f" {check_in_time}-{check_out_time}"

                    st.markdown(
                        f'<p style="font-size: 0.9rem; margin: 0;">- <b>{thai_date(row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"])}</b>{time_display} ({row["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]})</p>',
                        unsafe_allow_html=True
                    )

# -----------------------------
# Main App Logic
# -----------------------------
if st.session_state.step == "login":
    st.title("üìä HR Dashboard")
    st.info("‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á login (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÑ‡∏î‡πâ)")
    st.session_state.user = "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏≠‡∏á"
    st.session_state.step = "dashboard"
    st.rerun()
else:
    display_dashboard()
